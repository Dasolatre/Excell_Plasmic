/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dFCW3EJJak7e5FJ1Eb9ZNV
// Component: x-0MJgWs5WQl
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { useScreenVariants as useScreenVariants_3Kid9VNeHn18 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 3kid9VNeHn18/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: dFCW3EJJak7e5FJ1Eb9ZNV/projectcss
import sty from "./PlasmicLearnAccordion.module.css"; // plasmic-import: x-0MJgWs5WQl/css

createPlasmicElementProxy;

export const PlasmicLearnAccordion__VariantProps = new Array();

export const PlasmicLearnAccordion__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLearnAccordion__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "accordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_3Kid9VNeHn18()
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"card"}
      data-plasmic-override={overrides.card}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.card
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__lUcct)}
      >
        <h1
          className={classNames(
            projectcss.all,
            projectcss.h1,
            projectcss.__wab_text,
            sty.h1__x0UoA
          )}
        >
          {"About Solar"}
        </h1>
        {(() => {
          const child$Props = {
            activeKey: generateStateValueProp($state, [
              "accordion",
              "activePanelId"
            ]),
            bordered: true,
            className: classNames("__wab_instance", sty.accordion),
            expandIconPosition: "end",
            items: (
              <React.Fragment>
                <AntdAccordionItem
                  className={classNames(
                    "__wab_instance",
                    sty.accordionItem__hrguo
                  )}
                  id={1}
                  label2={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dAS
                      )}
                    >
                      {"First Item"}
                    </div>
                  }
                  showArrow={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3VggO
                    )}
                  >
                    {"First Children"}
                  </div>
                </AntdAccordionItem>
                <AntdAccordionItem
                  className={classNames(
                    "__wab_instance",
                    sty.accordionItem__dscO8
                  )}
                  id={2}
                  label2={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0U7N
                      )}
                    >
                      {"Second Item"}
                    </div>
                  }
                  showArrow={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qoxYk
                    )}
                  >
                    {"Second Children"}
                  </div>
                </AntdAccordionItem>
              </React.Fragment>
            ),

            onChange: async (...eventArgs) => {
              generateStateOnChangePropForCodeComponents(
                $state,
                "activePanelId",
                ["accordion", "activePanelId"],
                AntdAccordion_Helpers
              ).apply(null, eventArgs);
            },
            size: "large"
          };
          initializeCodeComponentStates(
            $state,
            [
              {
                name: "activePanelId",
                plasmicStateName: "accordion.activePanelId"
              }
            ],

            [],
            AntdAccordion_Helpers ?? {},
            child$Props
          );
          return (
            <AntdAccordion
              data-plasmic-name={"accordion"}
              data-plasmic-override={overrides.accordion}
              {...child$Props}
            />
          );
        })()}
      </Stack__>
      <div className={classNames(projectcss.all, sty.freeBox__w4Ok)}>
        <h1
          className={classNames(
            projectcss.all,
            projectcss.h1,
            projectcss.__wab_text,
            sty.h1__ekNka
          )}
        >
          {"Got Questions"}
        </h1>
        <h1
          className={classNames(
            projectcss.all,
            projectcss.h1,
            projectcss.__wab_text,
            sty.h1__wBifZ
          )}
        >
          {"Send Us Your Inquiries"}
        </h1>
        <PlasmicLink__
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(projectcss.all, projectcss.a, sty.link)}
          component={Link}
          href={`/get-solar`}
          platform={"nextjs"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__u6Mn0
            )}
          >
            {"Go to Get Solar Page"}
          </div>
        </PlasmicLink__>
      </div>
    </Stack__>
  );
}

const PlasmicDescendants = {
  card: ["card", "accordion", "link"],
  accordion: ["accordion"],
  link: ["link"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLearnAccordion__ArgProps,
          internalVariantPropNames: PlasmicLearnAccordion__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLearnAccordion__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "card") {
    func.displayName = "PlasmicLearnAccordion";
  } else {
    func.displayName = `PlasmicLearnAccordion.${nodeName}`;
  }
  return func;
}

export const PlasmicLearnAccordion = Object.assign(
  // Top-level PlasmicLearnAccordion renders the root element
  makeNodeComponent("card"),
  {
    // Helper components rendering sub-elements
    accordion: makeNodeComponent("accordion"),
    link: makeNodeComponent("link"),
    // Metadata about props expected for PlasmicLearnAccordion
    internalVariantProps: PlasmicLearnAccordion__VariantProps,
    internalArgProps: PlasmicLearnAccordion__ArgProps
  }
);

export default PlasmicLearnAccordion;
/* prettier-ignore-end */
